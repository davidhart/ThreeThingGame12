uniform int WorldCount ;			// Id 0
uniform float4x4 ViewProjection ;	// Id 1
uniform float3 EyePosition ;		// Id 2
uniform float4x4 WorldMatrix[ 4 ] ; // Id 3

void main(
	float4 a_Position		: POSITION,
	float3 a_Normal			: NORMAL,
	//float4 a_Color		: COLOR,
	float2 a_TexCoord		: TEXCOORD0,
	float4 a_Weight			: TEXCOORD1,

	out float4 v_Position	: POSITION,
	out float2 v_TexCoord	: TEXCOORD0,
	out float3 v_Normal		: TEXCOORD1
)
{
	float4 P = float4( 0.0 ) ;
	float3 N = float3( 0.0 ) ;
	
	// Calculate world position/normal of mesh
	if ( WorldCount <= 1 )
	{
		P = mul( a_Position, WorldMatrix[ 0 ] ) ;
		N = mul( float4( a_Normal, 0.0 ), WorldMatrix[ 0 ] ).xyz ;
	}
	// Calculate world position/normal of rigged mesh
	else
	{
		// Unrolled version of the following for loop
		/*
		for ( int i = 0 ; i < 4 ; i ++ ) {
			if ( i == WorldCount ) break ;
			float weight = a_Weight[ i ] ;
			P += mul( a_Position, WorldMatrix[ i ] ) * weight ;
			N += ( mul( float4( a_Normal, 0.0 ), WorldMatrix[ i ] ) ).xyz * weight ;
		}
		*/
		P = mul( a_Position, WorldMatrix[ 0 ] ) * a_Weight.x ;
		N = ( mul( float4( a_Normal, 0.0 ), WorldMatrix[ 0 ] ) ).xyz * a_Weight.x ;
		
		if ( WorldCount > 1 )
		{
			P += mul( a_Position, WorldMatrix[ 1 ] ) * a_Weight.y ;
			N += ( mul( float4( a_Normal, 0.0 ), WorldMatrix[ 1 ] ) ).xyz * a_Weight.y ;
			
			if ( WorldCount > 2 )
			{
				P += mul( a_Position, WorldMatrix[ 2 ] ) * a_Weight.z ;
				N += ( mul( float4( a_Normal, 0.0 ), WorldMatrix[ 2 ] ) ).xyz * a_Weight.z ;
				
				if ( WorldCount > 3 )
				{
					P += mul( a_Position, WorldMatrix[ 3 ] ) * a_Weight.w ;
					N += ( mul( float4( a_Normal, 0.0 ), WorldMatrix[ 3 ] ) ).xyz * a_Weight.w ;
				}
			}
		}
		N = normalize( N ) ;
	}

	v_Position = mul( P, ViewProjection ) ;
	v_TexCoord = a_TexCoord ;
	v_Normal = N;
}
